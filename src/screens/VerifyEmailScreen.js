// src/screens/VerifyEmailScreen.js// Email verification screen for entering confirmation codeimport React, { useState } from "react";import {  View,  Text,  TextInput,  TouchableOpacity,  StyleSheet,  Alert,  TouchableWithoutFeedback,  Keyboard,  ScrollView,} from "react-native";import { confirmSignUp, resendSignUpCode } from "@aws-amplify/auth";import { useTheme } from "../contexts/ThemeContext";import { getAuthErrorMessage } from "../utils/errorHandler";import { DataStore } from "@aws-amplify/datastore";import { User } from "../models";export default function VerifyEmailScreen({ navigation, route }) {  const { theme, isLoading } = useTheme();  const { username, userAttributes } = route.params || {};  const [confirmationCode, setConfirmationCode] = useState("");  const [isVerifying, setIsVerifying] = useState(false);  const [isResending, setIsResending] = useState(false);  const validateCode = () => {    if (!confirmationCode || confirmationCode.length !== 6) {      Alert.alert("Invalid Code", "Please enter the 6-digit verification code.");      return false;    }    return true;  };  const handleVerifyEmail = async () => {    if (!validateCode()) return;    setIsVerifying(true);    try {      const result = await confirmSignUp({        username: username,        confirmationCode: confirmationCode.trim()      });      console.log('Email verification successful:', result);      // After successful verification, create user profile in DataStore if userAttributes provided      if (userAttributes) {        const { email, username: displayUsername, role } = userAttributes;        try {          await DataStore.save(new User({            email: email,            username: displayUsername,            role: role,          }));          console.log('User profile created in DataStore');        } catch (datastoreError) {          console.error('DataStore save error:', datastoreError);          // Continue to login even if DataStore save fails        }      }      Alert.alert(        "Email Verified!",         "Your email has been successfully verified. You can now log in.",        [          {            text: "Login",            onPress: () => navigation.navigate('Login')          }        ]      );    } catch (error) {      console.error('Email verification error:', error);      const { title, message } = getAuthErrorMessage(error);      Alert.alert(title, message);    } finally {      setIsVerifying(false);    }  };  const handleResendCode = async () => {    if (!username) {      Alert.alert("Error", "Unable to resend code. Please try signing up again.");      return;    }    setIsResending(true);    try {      await resendSignUpCode({ username });      Alert.alert(        "Code Resent",         "A new verification code has been sent to your email address."      );    } catch (error) {      console.error('Resend code error:', error);      const { title, message } = getAuthErrorMessage(error);      Alert.alert(title, message);    } finally {      setIsResending(false);    }  };  const handleGoBack = () => {    Alert.alert(      "Cancel Verification",      "Are you sure you want to go back? You'll need to verify your email to complete account creation.",      [        { text: "Stay Here", style: "cancel" },        { text: "Go Back", onPress: () => navigation.navigate('Signup') }      ]    );  };  if (isLoading) {    return (      <View style={[styles.container, styles.centered, { backgroundColor: theme.background }]}>        <Text style={[styles.loadingText, { color: theme.text }]}>Loading...</Text>      </View>    );  }  return (    <TouchableWithoutFeedback onPress={Keyboard.dismiss}>      <ScrollView        style={[styles.container, { backgroundColor: theme.background }]}        contentContainerStyle={styles.contentContainer}        showsVerticalScrollIndicator={false}        keyboardShouldPersistTaps="handled"      >        <Text style={[styles.title, { color: theme.text }]}>Verify Your Email</Text>                <Text style={[styles.subtitle, { color: theme.text }]}>          We've sent a 6-digit verification code to your email address.           Please enter it below to complete your account setup.        </Text>        {username && (          <Text style={[styles.emailText, { color: theme.primary }]}>            {username}          </Text>        )}        <Text style={[styles.label, { color: theme.text }]}>Verification Code</Text>        <TextInput          style={[styles.input, {             backgroundColor: theme.card,             color: theme.text,             borderColor: theme.border           }]}          value={confirmationCode}          onChangeText={setConfirmationCode}          placeholder="Enter 6-digit code"          placeholderTextColor={theme.textSecondary}          keyboardType="numeric"          maxLength={6}          autoCapitalize="none"          autoComplete="one-time-code"          textContentType="oneTimeCode"        />        <TouchableOpacity          style={[styles.verifyButton, {             backgroundColor: theme.primary,            opacity: isVerifying ? 0.7 : 1          }]}          onPress={handleVerifyEmail}          disabled={isVerifying}        >          <Text style={styles.verifyButtonText}>            {isVerifying ? "Verifying..." : "Verify Email"}          </Text>        </TouchableOpacity>        <View style={styles.resendContainer}>          <Text style={[styles.resendText, { color: theme.textSecondary }]}>            Didn't receive the code?          </Text>          <TouchableOpacity            onPress={handleResendCode}            disabled={isResending}            style={styles.resendButton}          >            <Text style={[styles.resendButtonText, {               color: theme.primary,              opacity: isResending ? 0.7 : 1            }]}>              {isResending ? "Resending..." : "Resend Code"}            </Text>          </TouchableOpacity>        </View>        <TouchableOpacity          style={styles.backButton}          onPress={handleGoBack}        >          <Text style={[styles.backButtonText, { color: theme.textSecondary }]}>            Go Back to Sign Up          </Text>        </TouchableOpacity>      </ScrollView>    </TouchableWithoutFeedback>  );}const styles = StyleSheet.create({  container: {    flex: 1,  },  centered: {    justifyContent: 'center',    alignItems: 'center',  },  contentContainer: {    flexGrow: 1,    justifyContent: 'center',    paddingHorizontal: 20,    paddingVertical: 40,  },  loadingText: {    fontSize: 16,  },  title: {    fontSize: 28,    fontWeight: "bold",    textAlign: "center",    marginBottom: 10,  },  subtitle: {    fontSize: 16,    textAlign: "center",    marginBottom: 20,    lineHeight: 22,  },  emailText: {    fontSize: 16,    fontWeight: "600",    textAlign: "center",    marginBottom: 30,  },  label: {    fontSize: 16,    fontWeight: "600",    marginBottom: 8,  },  input: {    height: 50,    borderWidth: 1,    borderRadius: 8,    paddingHorizontal: 15,    fontSize: 18,    textAlign: "center",    letterSpacing: 3,    marginBottom: 20,  },  verifyButton: {    height: 50,    borderRadius: 8,    justifyContent: "center",    alignItems: "center",    marginBottom: 20,  },  verifyButtonText: {    color: "white",    fontSize: 16,    fontWeight: "600",  },  resendContainer: {    flexDirection: 'row',    justifyContent: 'center',    alignItems: 'center',    marginBottom: 20,    flexWrap: 'wrap',  },  resendText: {    fontSize: 14,    marginRight: 8,  },  resendButton: {    paddingVertical: 5,  },  resendButtonText: {    fontSize: 14,    fontWeight: "600",  },  backButton: {    paddingVertical: 10,    alignItems: 'center',  },  backButtonText: {    fontSize: 14,    textDecorationLine: 'underline',  },});